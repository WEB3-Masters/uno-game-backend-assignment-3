# Enum for Card types and colors
enum CardType {
    SKIP
    NUMBERED
    REVERSE
    DRAW
    WILD
    WILD_DRAW
}

enum CardColor {
    BLUE
    GREEN
    RED
    YELLOW
}

# Enum for Room states
enum RoomState {
    WAITING
    IN_PROGRESS
}

type Deck {
    id: ID!
    cards: [Card!]!
}

type Card {
    id: ID!
    type: CardType!
    color: CardColor
    number: Int
    deck: Deck
}

type Player {
    id: ID!
    username: String!
    password: String!
    cards: [Card!]
    room: Room
}

type Room {
    id: ID!
    deck: Deck
    discardPile: Deck
    roomState: RoomState
    players: [Player!]
    currentPlayer: Player
}

input RoomInput {
    id: ID!
    deck: DeckInput
    discardPile: DeckInput
    roomState: RoomState
    players: [PlayerInput!]
    currentPlayer: PlayerInput
}

input DeckInput {
    id: ID!
    cards: [CardInput!]!
}

input CardInput {
    id: ID!
    type: CardType!
    color: CardColor
    number: Int
}

input PlayerInput {
    id: ID!
    cards: [CardInput!]
}

# New input types for initial card creation
input InitialCardInput {
    type: CardType!
    color: CardColor
    number: Int
}

input InitialPlayerCardsInput {
    playerId: ID!
    cards: [InitialCardInput!]!
}

input InitialGameInput {
    roomId: ID!
    deckCards: [InitialCardInput!]!
    pileCards: [InitialCardInput!]!
    playerCards: [InitialPlayerCardsInput!]!
    roomState: RoomState!
    currentPlayerId: ID
}

# Queries for fetching player(s)
type Query {
    player(id: ID!): Player
    players: [Player!]!
    room(id: ID!): Room
    rooms: [Room!]!
}

type Mutation {
    # Registers a new player with username and password
    registerPlayer(username: String!, password: String!): Player!

    # Authenticates a player and returns a token or similar string
    loginPlayer(username: String!, password: String!): Player!

    # Creates a new game with the host's player ID
    createRoom(hostId: ID!): Room!
    deleteRoom(id: ID!): Boolean

    # Allows a player to join a game
    joinRoom(roomId: ID!, playerId: ID!): Room!

    # Updates room state and handles game actions
    updateRoom(room: RoomInput!): Room!

    # New mutation for initializing a game with cards
    initializeGame(gameInput: InitialGameInput!): Room!
}

type Subscription {
  roomUpdated(roomId: ID!): Room
}
